; ModuleID = './SDL/app2.c'
source_filename = "./SDL/app2.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%struct.Object = type { %struct.vector, %struct.vector, i32 }
%struct.vector = type { i64, i64 }

; Function Attrs: nounwind uwtable
define dso_local void @set_start_positions(%struct.Object* nocapture noundef writeonly %0) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.Object, %struct.Object* %0, i64 0, i32 1, i32 0
  %3 = getelementptr inbounds %struct.Object, %struct.Object* %0, i64 0, i32 1, i32 1
  %4 = bitcast i64* %2 to i8*
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %4, i8 0, i64 16, i1 false)
  %5 = tail call i32 @simRand(i32 noundef 500, i32 noundef 4620) #4
  %6 = sext i32 %5 to i64
  %7 = getelementptr inbounds %struct.Object, %struct.Object* %0, i64 0, i32 0, i32 0
  store i64 %6, i64* %7, align 8, !tbaa !5
  %8 = tail call i32 @simRand(i32 noundef 500, i32 noundef 4619) #4
  %9 = sext i32 %8 to i64
  %10 = getelementptr inbounds %struct.Object, %struct.Object* %0, i64 0, i32 0, i32 1
  store i64 %9, i64* %10, align 8, !tbaa !12
  %11 = tail call i32 @simRand(i32 noundef -200, i32 noundef 200) #4
  %12 = sext i32 %11 to i64
  store i64 %12, i64* %2, align 8, !tbaa !13
  %13 = tail call i32 @simRand(i32 noundef -200, i32 noundef 200) #4
  %14 = sext i32 %13 to i64
  store i64 %14, i64* %3, align 8, !tbaa !14
  %15 = tail call i32 @simRand(i32 noundef 0, i32 noundef 2147483647) #4
  %16 = getelementptr inbounds %struct.Object, %struct.Object* %0, i64 0, i32 2
  store i32 %15, i32* %16, align 8, !tbaa !15
  ret void
}

declare i32 @simRand(i32 noundef, i32 noundef) local_unnamed_addr #1

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define dso_local void @update_pos(%struct.Object* noundef %0) local_unnamed_addr #2 {
  %2 = icmp eq %struct.Object* %0, null
  br i1 %2, label %11, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.Object, %struct.Object* %0, i64 0, i32 1, i32 0
  %5 = bitcast i64* %4 to <2 x i64>*
  %6 = load <2 x i64>, <2 x i64>* %5, align 8, !tbaa !16
  %7 = bitcast %struct.Object* %0 to <2 x i64>*
  %8 = load <2 x i64>, <2 x i64>* %7, align 8, !tbaa !16
  %9 = add nsw <2 x i64> %8, %6
  %10 = bitcast %struct.Object* %0 to <2 x i64>*
  store <2 x i64> %9, <2 x i64>* %10, align 8, !tbaa !16
  br label %11

11:                                               ; preds = %1, %3
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local void @clear_draw() local_unnamed_addr #0 {
  br label %1

1:                                                ; preds = %0, %5
  %2 = phi i64 [ 0, %0 ], [ %6, %5 ]
  %3 = trunc i64 %2 to i32
  br label %8

4:                                                ; preds = %5
  ret void

5:                                                ; preds = %8
  %6 = add nuw nsw i64 %2, 1
  %7 = icmp eq i64 %6, 512
  br i1 %7, label %4, label %1, !llvm.loop !17

8:                                                ; preds = %1, %8
  %9 = phi i64 [ 0, %1 ], [ %11, %8 ]
  %10 = trunc i64 %9 to i32
  tail call void @simPutPixel(i32 noundef %3, i32 noundef %10, i32 noundef 0) #4
  %11 = add nuw nsw i64 %9, 1
  %12 = icmp eq i64 %11, 512
  br i1 %12, label %5, label %8, !llvm.loop !19
}

declare void @simPutPixel(i32 noundef, i32 noundef, i32 noundef) local_unnamed_addr #1

; Function Attrs: nounwind uwtable
define dso_local void @draw_objects(%struct.Object* nocapture noundef readonly %0) local_unnamed_addr #0 {
  br label %2

2:                                                ; preds = %5, %1
  %3 = phi i64 [ 0, %1 ], [ %6, %5 ]
  %4 = trunc i64 %3 to i32
  br label %12

5:                                                ; preds = %12
  %6 = add nuw nsw i64 %3, 1
  %7 = icmp eq i64 %6, 512
  br i1 %7, label %8, label %2, !llvm.loop !17

8:                                                ; preds = %5
  %9 = getelementptr inbounds %struct.Object, %struct.Object* %0, i64 0, i32 0, i32 0
  %10 = getelementptr inbounds %struct.Object, %struct.Object* %0, i64 0, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Object, %struct.Object* %0, i64 0, i32 2
  br label %17

12:                                               ; preds = %12, %2
  %13 = phi i64 [ 0, %2 ], [ %15, %12 ]
  %14 = trunc i64 %13 to i32
  tail call void @simPutPixel(i32 noundef %4, i32 noundef %14, i32 noundef 0) #4
  %15 = add nuw nsw i64 %13, 1
  %16 = icmp eq i64 %15, 512
  br i1 %16, label %5, label %12, !llvm.loop !19

17:                                               ; preds = %8, %21
  %18 = phi i64 [ 0, %8 ], [ %22, %21 ]
  %19 = trunc i64 %18 to i32
  br label %24

20:                                               ; preds = %21
  ret void

21:                                               ; preds = %39
  %22 = add nuw nsw i64 %18, 1
  %23 = icmp eq i64 %22, 512
  br i1 %23, label %20, label %17, !llvm.loop !20

24:                                               ; preds = %17, %39
  %25 = phi i64 [ 0, %17 ], [ %40, %39 ]
  %26 = load i64, i64* %9, align 8, !tbaa !5
  %27 = sdiv i64 %26, 10
  %28 = sub i64 %27, %18
  %29 = mul i64 %28, %28
  %30 = load i64, i64* %10, align 8, !tbaa !12
  %31 = sdiv i64 %30, 10
  %32 = sub nsw i64 %31, %25
  %33 = mul i64 %32, %32
  %34 = add i64 %33, %29
  %35 = icmp ult i64 %34, 401
  br i1 %35, label %36, label %39

36:                                               ; preds = %24
  %37 = trunc i64 %25 to i32
  %38 = load i32, i32* %11, align 8, !tbaa !15
  tail call void @simPutPixel(i32 noundef %19, i32 noundef %37, i32 noundef %38) #4
  br label %39

39:                                               ; preds = %24, %36
  %40 = add nuw nsw i64 %25, 1
  %41 = icmp eq i64 %40, 512
  br i1 %41, label %21, label %24, !llvm.loop !21
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define dso_local void @wall_reflection(%struct.Object* noundef %0) local_unnamed_addr #2 {
  %2 = icmp eq %struct.Object* %0, null
  br i1 %2, label %21, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.Object, %struct.Object* %0, i64 0, i32 0, i32 0
  %5 = load i64, i64* %4, align 8, !tbaa !5
  %6 = add i64 %5, -4620
  %7 = icmp ult i64 %6, -4110
  br i1 %7, label %8, label %12

8:                                                ; preds = %3
  %9 = getelementptr inbounds %struct.Object, %struct.Object* %0, i64 0, i32 1, i32 0
  %10 = load i64, i64* %9, align 8, !tbaa !13
  %11 = sub nsw i64 0, %10
  store i64 %11, i64* %9, align 8, !tbaa !13
  br label %12

12:                                               ; preds = %3, %8
  %13 = getelementptr inbounds %struct.Object, %struct.Object* %0, i64 0, i32 0, i32 1
  %14 = load i64, i64* %13, align 8, !tbaa !12
  %15 = add i64 %14, -4620
  %16 = icmp ult i64 %15, -4110
  br i1 %16, label %17, label %21

17:                                               ; preds = %12
  %18 = getelementptr inbounds %struct.Object, %struct.Object* %0, i64 0, i32 1, i32 1
  %19 = load i64, i64* %18, align 8, !tbaa !14
  %20 = sub nsw i64 0, %19
  store i64 %20, i64* %18, align 8, !tbaa !14
  br label %21

21:                                               ; preds = %12, %17, %1
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local void @app() local_unnamed_addr #0 {
  %1 = tail call i32 @simRand(i32 noundef 500, i32 noundef 4620) #4
  %2 = sext i32 %1 to i64
  %3 = tail call i32 @simRand(i32 noundef 500, i32 noundef 4619) #4
  %4 = sext i32 %3 to i64
  %5 = tail call i32 @simRand(i32 noundef -200, i32 noundef 200) #4
  %6 = sext i32 %5 to i64
  %7 = tail call i32 @simRand(i32 noundef -200, i32 noundef 200) #4
  %8 = sext i32 %7 to i64
  %9 = tail call i32 @simRand(i32 noundef 0, i32 noundef 2147483647) #4
  br label %10

10:                                               ; preds = %62, %0
  %11 = phi i64 [ %8, %0 ], [ %30, %62 ]
  %12 = phi i64 [ %6, %0 ], [ %18, %62 ]
  %13 = phi i64 [ %4, %0 ], [ %31, %62 ]
  %14 = phi i64 [ %2, %0 ], [ %21, %62 ]
  %15 = add i64 %14, -4620
  %16 = icmp ult i64 %15, -4110
  %17 = sub nsw i64 0, %12
  %18 = select i1 %16, i64 %17, i64 %12
  %19 = add i64 %13, -4620
  %20 = sub nsw i64 0, %11
  %21 = add nsw i64 %18, %14
  br label %22

22:                                               ; preds = %25, %10
  %23 = phi i64 [ 0, %10 ], [ %26, %25 ]
  %24 = trunc i64 %23 to i32
  br label %34

25:                                               ; preds = %34
  %26 = add nuw nsw i64 %23, 1
  %27 = icmp eq i64 %26, 512
  br i1 %27, label %28, label %22, !llvm.loop !17

28:                                               ; preds = %25
  %29 = icmp ult i64 %19, -4110
  %30 = select i1 %29, i64 %20, i64 %11
  %31 = add nsw i64 %30, %13
  %32 = sdiv i64 %21, 10
  %33 = sdiv i64 %31, 10
  br label %39

34:                                               ; preds = %34, %22
  %35 = phi i64 [ 0, %22 ], [ %37, %34 ]
  %36 = trunc i64 %35 to i32
  tail call void @simPutPixel(i32 noundef %24, i32 noundef %36, i32 noundef 0) #4
  %37 = add nuw nsw i64 %35, 1
  %38 = icmp eq i64 %37, 512
  br i1 %38, label %25, label %34, !llvm.loop !19

39:                                               ; preds = %28, %44
  %40 = phi i64 [ %45, %44 ], [ 0, %28 ]
  %41 = trunc i64 %40 to i32
  %42 = sub nsw i64 %32, %40
  %43 = mul i64 %42, %42
  br label %47

44:                                               ; preds = %55
  %45 = add nuw nsw i64 %40, 1
  %46 = icmp eq i64 %45, 512
  br i1 %46, label %58, label %39, !llvm.loop !20

47:                                               ; preds = %55, %39
  %48 = phi i64 [ 0, %39 ], [ %56, %55 ]
  %49 = sub nsw i64 %33, %48
  %50 = mul i64 %49, %49
  %51 = add i64 %50, %43
  %52 = icmp ult i64 %51, 401
  br i1 %52, label %53, label %55

53:                                               ; preds = %47
  %54 = trunc i64 %48 to i32
  tail call void @simPutPixel(i32 noundef %41, i32 noundef %54, i32 noundef %9) #4
  br label %55

55:                                               ; preds = %53, %47
  %56 = add nuw nsw i64 %48, 1
  %57 = icmp eq i64 %56, 512
  br i1 %57, label %44, label %47, !llvm.loop !21

58:                                               ; preds = %44
  %59 = tail call i32 (...) @simExit() #4
  %60 = icmp eq i32 %59, 1
  br i1 %60, label %61, label %62

61:                                               ; preds = %58
  ret void

62:                                               ; preds = %58
  tail call void (...) @simFlush() #4
  br label %10
}

declare i32 @simExit(...) local_unnamed_addr #1

declare void @simFlush(...) local_unnamed_addr #1

; Function Attrs: argmemonly nofree nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

attributes #0 = { nounwind uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #2 = { mustprogress nofree norecurse nosync nounwind uwtable willreturn "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { argmemonly nofree nounwind willreturn writeonly }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1, !2, !3}
!llvm.ident = !{!4}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{i32 7, !"uwtable", i32 1}
!4 = !{!"Ubuntu clang version 14.0.0-1ubuntu1.1"}
!5 = !{!6, !8, i64 0}
!6 = !{!"", !7, i64 0, !7, i64 16, !11, i64 32}
!7 = !{!"", !8, i64 0, !8, i64 8}
!8 = !{!"long long", !9, i64 0}
!9 = !{!"omnipotent char", !10, i64 0}
!10 = !{!"Simple C/C++ TBAA"}
!11 = !{!"int", !9, i64 0}
!12 = !{!6, !8, i64 8}
!13 = !{!6, !8, i64 16}
!14 = !{!6, !8, i64 24}
!15 = !{!6, !11, i64 32}
!16 = !{!8, !8, i64 0}
!17 = distinct !{!17, !18}
!18 = !{!"llvm.loop.mustprogress"}
!19 = distinct !{!19, !18}
!20 = distinct !{!20, !18}
!21 = distinct !{!21, !18}
