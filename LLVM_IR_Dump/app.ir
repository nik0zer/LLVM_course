; ModuleID = 'app.c'
source_filename = "app.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%struct.Object = type { i32, %struct.vector, %struct.vector, %struct.vector, i32, i32 }
%struct.vector = type { i64, i64 }

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone uwtable willreturn
define dso_local i64 @check_for_force_overflow(i64 noundef %0) local_unnamed_addr #0 {
  %2 = icmp slt i64 %0, 0
  %3 = select i1 %2, i64 2147483647, i64 %0
  ret i64 %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone uwtable willreturn
define dso_local i64 @mabs(i64 noundef %0) local_unnamed_addr #0 {
  %2 = tail call i64 @llvm.abs.i64(i64 %0, i1 true)
  ret i64 %2
}

; Function Attrs: mustprogress nofree nosync nounwind readnone uwtable willreturn
define dso_local i64 @check_for_boost_overflow(i64 noundef %0) local_unnamed_addr #1 {
  %2 = tail call i64 @llvm.abs.i64(i64 %0, i1 true) #10
  %3 = icmp ugt i64 %2, 100
  %4 = icmp sgt i64 %0, 0
  %5 = select i1 %4, i64 100, i64 -100
  %6 = select i1 %3, i64 %5, i64 %0
  ret i64 %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn writeonly
define dso_local void @null_boost(%struct.Object* noundef writeonly %0) local_unnamed_addr #2 {
  %2 = icmp eq %struct.Object* %0, null
  br i1 %2, label %6, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.Object, %struct.Object* %0, i64 0, i32 3, i32 0
  %5 = bitcast i64* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %5, i8 0, i64 16, i1 false)
  br label %6

6:                                                ; preds = %1, %3
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local void @set_start_positions(%struct.Object* nocapture noundef writeonly %0) local_unnamed_addr #3 {
  br label %3

2:                                                ; preds = %3
  ret void

3:                                                ; preds = %1, %3
  %4 = phi i64 [ 0, %1 ], [ %23, %3 ]
  %5 = getelementptr inbounds %struct.Object, %struct.Object* %0, i64 %4, i32 5
  store i32 1, i32* %5, align 4, !tbaa !5
  %6 = getelementptr inbounds %struct.Object, %struct.Object* %0, i64 %4, i32 2, i32 0
  %7 = getelementptr inbounds %struct.Object, %struct.Object* %0, i64 %4, i32 2, i32 1
  %8 = bitcast i64* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(32) %8, i8 0, i64 32, i1 false)
  %9 = tail call i32 @simRand(i32 noundef 10, i32 noundef 20) #10
  %10 = getelementptr inbounds %struct.Object, %struct.Object* %0, i64 %4, i32 0
  store i32 %9, i32* %10, align 8, !tbaa !12
  %11 = tail call i32 @simRand(i32 noundef 500, i32 noundef 4620) #10
  %12 = sext i32 %11 to i64
  %13 = getelementptr inbounds %struct.Object, %struct.Object* %0, i64 %4, i32 1, i32 0
  store i64 %12, i64* %13, align 8, !tbaa !13
  %14 = tail call i32 @simRand(i32 noundef 500, i32 noundef 4619) #10
  %15 = sext i32 %14 to i64
  %16 = getelementptr inbounds %struct.Object, %struct.Object* %0, i64 %4, i32 1, i32 1
  store i64 %15, i64* %16, align 8, !tbaa !14
  %17 = tail call i32 @simRand(i32 noundef -3000, i32 noundef 3000) #10
  %18 = sext i32 %17 to i64
  store i64 %18, i64* %6, align 8, !tbaa !15
  %19 = tail call i32 @simRand(i32 noundef -3000, i32 noundef 3000) #10
  %20 = sext i32 %19 to i64
  store i64 %20, i64* %7, align 8, !tbaa !16
  %21 = tail call i32 @simRand(i32 noundef 0, i32 noundef 2147483647) #10
  %22 = getelementptr inbounds %struct.Object, %struct.Object* %0, i64 %4, i32 4
  store i32 %21, i32* %22, align 8, !tbaa !17
  %23 = add nuw nsw i64 %4, 1
  %24 = icmp eq i64 %23, 10
  br i1 %24, label %2, label %3, !llvm.loop !18
}

; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #4

declare i32 @simRand(i32 noundef, i32 noundef) local_unnamed_addr #5

; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #4

; Function Attrs: mustprogress nofree nosync nounwind uwtable willreturn
define dso_local void @calculate_boost(%struct.Object* noundef %0, %struct.Object* noundef %1) local_unnamed_addr #6 {
  %3 = icmp eq %struct.Object* %0, null
  %4 = icmp eq %struct.Object* %1, null
  %5 = or i1 %3, %4
  br i1 %5, label %113, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.Object, %struct.Object* %1, i64 0, i32 1, i32 0
  %8 = load i64, i64* %7, align 8, !tbaa !13
  %9 = sdiv i64 %8, -10
  %10 = getelementptr inbounds %struct.Object, %struct.Object* %0, i64 0, i32 1, i32 0
  %11 = load i64, i64* %10, align 8, !tbaa !13
  %12 = sdiv i64 %11, -10
  %13 = icmp eq i64 %12, %9
  br i1 %13, label %19, label %14

14:                                               ; preds = %6
  %15 = getelementptr inbounds %struct.Object, %struct.Object* %0, i64 0, i32 1, i32 1
  %16 = load i64, i64* %15, align 8, !tbaa !14
  %17 = getelementptr inbounds %struct.Object, %struct.Object* %1, i64 0, i32 1, i32 1
  %18 = load i64, i64* %17, align 8, !tbaa !14
  br label %27

19:                                               ; preds = %6
  %20 = getelementptr inbounds %struct.Object, %struct.Object* %1, i64 0, i32 1, i32 1
  %21 = load i64, i64* %20, align 8, !tbaa !14
  %22 = sdiv i64 %21, -10
  %23 = getelementptr inbounds %struct.Object, %struct.Object* %0, i64 0, i32 1, i32 1
  %24 = load i64, i64* %23, align 8, !tbaa !14
  %25 = sdiv i64 %24, -10
  %26 = icmp eq i64 %25, %22
  br i1 %26, label %113, label %27

27:                                               ; preds = %14, %19
  %28 = phi i64 [ %18, %14 ], [ %21, %19 ]
  %29 = phi i64 [ %16, %14 ], [ %24, %19 ]
  %30 = getelementptr inbounds %struct.Object, %struct.Object* %0, i64 0, i32 0
  %31 = load i32, i32* %30, align 8, !tbaa !12
  %32 = mul nsw i32 %31, %31
  %33 = getelementptr inbounds %struct.Object, %struct.Object* %1, i64 0, i32 0
  %34 = load i32, i32* %33, align 8, !tbaa !12
  %35 = mul nsw i32 %34, %34
  %36 = sub nsw i64 %11, %8
  %37 = mul nsw i64 %36, %36
  %38 = sub nsw i64 %29, %28
  %39 = mul nsw i64 %38, %38
  %40 = add nuw nsw i64 %39, %37
  %41 = udiv i64 %40, 100
  %42 = trunc i64 %41 to i32
  %43 = icmp slt i32 %42, 10
  br i1 %43, label %51, label %44

44:                                               ; preds = %27
  %45 = mul nsw i32 %32, 1000
  %46 = mul nsw i32 %45, %35
  %47 = sdiv i32 %46, %42
  %48 = icmp ult i32 %47, 2147483647
  %49 = select i1 %48, i32 %47, i32 2147483647
  %50 = zext i32 %49 to i64
  br label %51

51:                                               ; preds = %27, %44
  %52 = phi i64 [ %50, %44 ], [ 1000000, %27 ]
  %53 = sub nsw i64 %8, %11
  %54 = sdiv i64 %53, 10
  %55 = sub nsw i64 %28, %29
  %56 = sdiv i64 %55, 10
  %57 = add i64 %53, 9
  %58 = icmp ult i64 %57, 19
  %59 = add i64 %55, 9
  %60 = icmp ult i64 %59, 19
  %61 = select i1 %58, i1 %60, i1 false
  %62 = select i1 %61, i64 1, i64 %54
  %63 = select i1 %61, i64 1, i64 %56
  %64 = mul i64 %52, %62
  %65 = tail call i64 @llvm.abs.i64(i64 %62, i1 true) #10
  %66 = tail call i64 @llvm.abs.i64(i64 %63, i1 true) #10
  %67 = add nuw nsw i64 %65, %66
  %68 = sdiv i64 %64, %67
  %69 = zext i32 %32 to i64
  %70 = sdiv i64 %68, %69
  %71 = tail call i64 @llvm.abs.i64(i64 %70, i1 true) #10
  %72 = icmp ugt i64 %71, 100
  %73 = icmp sgt i64 %70, 0
  %74 = select i1 %73, i64 100, i64 -100
  %75 = select i1 %72, i64 %74, i64 %70
  %76 = getelementptr inbounds %struct.Object, %struct.Object* %0, i64 0, i32 3, i32 0
  %77 = load i64, i64* %76, align 8, !tbaa !20
  %78 = add nsw i64 %75, %77
  store i64 %78, i64* %76, align 8, !tbaa !20
  %79 = mul i64 %52, %63
  %80 = sdiv i64 %79, %67
  %81 = sdiv i64 %80, %69
  %82 = tail call i64 @llvm.abs.i64(i64 %81, i1 true) #10
  %83 = icmp ugt i64 %82, 100
  %84 = icmp sgt i64 %81, 0
  %85 = select i1 %84, i64 100, i64 -100
  %86 = select i1 %83, i64 %85, i64 %81
  %87 = getelementptr inbounds %struct.Object, %struct.Object* %0, i64 0, i32 3, i32 1
  %88 = load i64, i64* %87, align 8, !tbaa !21
  %89 = add nsw i64 %86, %88
  store i64 %89, i64* %87, align 8, !tbaa !21
  %90 = sub i64 0, %64
  %91 = sdiv i64 %90, %67
  %92 = zext i32 %35 to i64
  %93 = sdiv i64 %91, %92
  %94 = tail call i64 @llvm.abs.i64(i64 %93, i1 true) #10
  %95 = icmp ugt i64 %94, 100
  %96 = icmp sgt i64 %93, 0
  %97 = select i1 %96, i64 100, i64 -100
  %98 = select i1 %95, i64 %97, i64 %93
  %99 = getelementptr inbounds %struct.Object, %struct.Object* %1, i64 0, i32 3, i32 0
  %100 = load i64, i64* %99, align 8, !tbaa !20
  %101 = add nsw i64 %98, %100
  store i64 %101, i64* %99, align 8, !tbaa !20
  %102 = sub i64 0, %79
  %103 = sdiv i64 %102, %67
  %104 = sdiv i64 %103, %92
  %105 = tail call i64 @llvm.abs.i64(i64 %104, i1 true) #10
  %106 = icmp ugt i64 %105, 100
  %107 = icmp sgt i64 %104, 0
  %108 = select i1 %107, i64 100, i64 -100
  %109 = select i1 %106, i64 %108, i64 %104
  %110 = getelementptr inbounds %struct.Object, %struct.Object* %1, i64 0, i32 3, i32 1
  %111 = load i64, i64* %110, align 8, !tbaa !21
  %112 = add nsw i64 %109, %111
  store i64 %112, i64* %110, align 8, !tbaa !21
  br label %113

113:                                              ; preds = %2, %19, %51
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define dso_local void @update_pos(%struct.Object* noundef %0) local_unnamed_addr #7 {
  %2 = icmp eq %struct.Object* %0, null
  br i1 %2, label %24, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.Object, %struct.Object* %0, i64 0, i32 3, i32 0
  %5 = load i64, i64* %4, align 8, !tbaa !20
  %6 = getelementptr inbounds %struct.Object, %struct.Object* %0, i64 0, i32 2, i32 0
  %7 = load i64, i64* %6, align 8, !tbaa !15
  %8 = add nsw i64 %7, %5
  %9 = getelementptr inbounds %struct.Object, %struct.Object* %0, i64 0, i32 3, i32 1
  %10 = load i64, i64* %9, align 8, !tbaa !21
  %11 = getelementptr inbounds %struct.Object, %struct.Object* %0, i64 0, i32 2, i32 1
  %12 = load i64, i64* %11, align 8, !tbaa !16
  %13 = add nsw i64 %12, %10
  %14 = mul nsw i64 %8, 99
  %15 = sdiv i64 %14, 100
  store i64 %15, i64* %6, align 8, !tbaa !15
  %16 = mul nsw i64 %13, 99
  %17 = sdiv i64 %16, 100
  store i64 %17, i64* %11, align 8, !tbaa !16
  %18 = getelementptr inbounds %struct.Object, %struct.Object* %0, i64 0, i32 1, i32 0
  %19 = load i64, i64* %18, align 8, !tbaa !13
  %20 = add nsw i64 %19, %15
  store i64 %20, i64* %18, align 8, !tbaa !13
  %21 = getelementptr inbounds %struct.Object, %struct.Object* %0, i64 0, i32 1, i32 1
  %22 = load i64, i64* %21, align 8, !tbaa !14
  %23 = add nsw i64 %22, %17
  store i64 %23, i64* %21, align 8, !tbaa !14
  br label %24

24:                                               ; preds = %1, %3
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local void @clear_draw() local_unnamed_addr #3 {
  br label %1

1:                                                ; preds = %0, %5
  %2 = phi i64 [ 0, %0 ], [ %6, %5 ]
  %3 = trunc i64 %2 to i32
  br label %8

4:                                                ; preds = %5
  ret void

5:                                                ; preds = %8
  %6 = add nuw nsw i64 %2, 1
  %7 = icmp eq i64 %6, 512
  br i1 %7, label %4, label %1, !llvm.loop !22

8:                                                ; preds = %1, %8
  %9 = phi i64 [ 0, %1 ], [ %11, %8 ]
  %10 = trunc i64 %9 to i32
  tail call void @simPutPixel(i32 noundef %3, i32 noundef %10, i32 noundef 0) #10
  %11 = add nuw nsw i64 %9, 1
  %12 = icmp eq i64 %11, 512
  br i1 %12, label %5, label %8, !llvm.loop !23
}

declare void @simPutPixel(i32 noundef, i32 noundef, i32 noundef) local_unnamed_addr #5

; Function Attrs: nounwind uwtable
define dso_local void @draw_objects(%struct.Object* nocapture noundef readonly %0) local_unnamed_addr #3 {
  br label %2

2:                                                ; preds = %5, %1
  %3 = phi i64 [ 0, %1 ], [ %6, %5 ]
  %4 = trunc i64 %3 to i32
  br label %8

5:                                                ; preds = %8
  %6 = add nuw nsw i64 %3, 1
  %7 = icmp eq i64 %6, 512
  br i1 %7, label %13, label %2, !llvm.loop !22

8:                                                ; preds = %8, %2
  %9 = phi i64 [ 0, %2 ], [ %11, %8 ]
  %10 = trunc i64 %9 to i32
  tail call void @simPutPixel(i32 noundef %4, i32 noundef %10, i32 noundef 0) #10
  %11 = add nuw nsw i64 %9, 1
  %12 = icmp eq i64 %11, 512
  br i1 %12, label %5, label %8, !llvm.loop !23

13:                                               ; preds = %5, %24
  %14 = phi i64 [ %25, %24 ], [ 0, %5 ]
  %15 = getelementptr inbounds %struct.Object, %struct.Object* %0, i64 %14, i32 1, i32 0
  %16 = getelementptr inbounds %struct.Object, %struct.Object* %0, i64 %14, i32 1, i32 1
  %17 = getelementptr inbounds %struct.Object, %struct.Object* %0, i64 %14, i32 0
  %18 = getelementptr inbounds %struct.Object, %struct.Object* %0, i64 %14, i32 5
  %19 = getelementptr inbounds %struct.Object, %struct.Object* %0, i64 %14, i32 4
  br label %21

20:                                               ; preds = %24
  ret void

21:                                               ; preds = %13, %27
  %22 = phi i64 [ 0, %13 ], [ %28, %27 ]
  %23 = trunc i64 %22 to i32
  br label %30

24:                                               ; preds = %27
  %25 = add nuw nsw i64 %14, 1
  %26 = icmp eq i64 %25, 10
  br i1 %26, label %20, label %13, !llvm.loop !24

27:                                               ; preds = %51
  %28 = add nuw nsw i64 %22, 1
  %29 = icmp eq i64 %28, 512
  br i1 %29, label %24, label %21, !llvm.loop !25

30:                                               ; preds = %21, %51
  %31 = phi i64 [ 0, %21 ], [ %52, %51 ]
  %32 = load i64, i64* %15, align 8, !tbaa !13
  %33 = sdiv i64 %32, 10
  %34 = sub i64 %33, %22
  %35 = mul i64 %34, %34
  %36 = load i64, i64* %16, align 8, !tbaa !14
  %37 = sdiv i64 %36, 10
  %38 = sub nsw i64 %37, %31
  %39 = mul i64 %38, %38
  %40 = add i64 %39, %35
  %41 = load i32, i32* %17, align 8, !tbaa !12
  %42 = mul nsw i32 %41, %41
  %43 = zext i32 %42 to i64
  %44 = icmp ugt i64 %40, %43
  br i1 %44, label %51, label %45

45:                                               ; preds = %30
  %46 = load i32, i32* %18, align 4, !tbaa !5
  %47 = icmp eq i32 %46, 0
  br i1 %47, label %51, label %48

48:                                               ; preds = %45
  %49 = trunc i64 %31 to i32
  %50 = load i32, i32* %19, align 8, !tbaa !17
  tail call void @simPutPixel(i32 noundef %23, i32 noundef %49, i32 noundef %50) #10
  br label %51

51:                                               ; preds = %30, %45, %48
  %52 = add nuw nsw i64 %31, 1
  %53 = icmp eq i64 %52, 512
  br i1 %53, label %27, label %30, !llvm.loop !26
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define dso_local void @wall_reflection(%struct.Object* noundef %0) local_unnamed_addr #7 {
  %2 = icmp eq %struct.Object* %0, null
  br i1 %2, label %23, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.Object, %struct.Object* %0, i64 0, i32 1, i32 0
  %5 = load i64, i64* %4, align 8, !tbaa !13
  %6 = icmp sgt i64 %5, 4619
  br i1 %6, label %9, label %7

7:                                                ; preds = %3
  %8 = icmp slt i64 %5, 510
  br i1 %8, label %9, label %13

9:                                                ; preds = %7, %3
  %10 = phi i64 [ -200, %3 ], [ 200, %7 ]
  %11 = getelementptr inbounds %struct.Object, %struct.Object* %0, i64 0, i32 3, i32 0
  store i64 %10, i64* %11, align 8, !tbaa !20
  %12 = getelementptr inbounds %struct.Object, %struct.Object* %0, i64 0, i32 2, i32 0
  store i64 0, i64* %12, align 8, !tbaa !15
  br label %13

13:                                               ; preds = %9, %7
  %14 = getelementptr inbounds %struct.Object, %struct.Object* %0, i64 0, i32 1, i32 1
  %15 = load i64, i64* %14, align 8, !tbaa !14
  %16 = icmp sgt i64 %15, 4619
  br i1 %16, label %19, label %17

17:                                               ; preds = %13
  %18 = icmp slt i64 %15, 510
  br i1 %18, label %19, label %23

19:                                               ; preds = %17, %13
  %20 = phi i64 [ -200, %13 ], [ 200, %17 ]
  %21 = getelementptr inbounds %struct.Object, %struct.Object* %0, i64 0, i32 3, i32 1
  store i64 %20, i64* %21, align 8, !tbaa !21
  %22 = getelementptr inbounds %struct.Object, %struct.Object* %0, i64 0, i32 2, i32 1
  store i64 0, i64* %22, align 8, !tbaa !16
  br label %23

23:                                               ; preds = %19, %1, %17
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local void @app() local_unnamed_addr #3 {
  %1 = alloca [10 x %struct.Object], align 16
  %2 = bitcast [10 x %struct.Object]* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 640, i8* nonnull %2) #10
  %3 = getelementptr inbounds [10 x %struct.Object], [10 x %struct.Object]* %1, i64 0, i64 0
  call void @set_start_positions(%struct.Object* noundef nonnull %3)
  %4 = getelementptr inbounds [10 x %struct.Object], [10 x %struct.Object]* %1, i64 0, i64 0, i32 3, i32 0
  %5 = bitcast i64* %4 to i8*
  %6 = getelementptr inbounds [10 x %struct.Object], [10 x %struct.Object]* %1, i64 0, i64 1, i32 3, i32 0
  %7 = bitcast i64* %6 to i8*
  %8 = getelementptr inbounds [10 x %struct.Object], [10 x %struct.Object]* %1, i64 0, i64 2, i32 3, i32 0
  %9 = bitcast i64* %8 to i8*
  %10 = getelementptr inbounds [10 x %struct.Object], [10 x %struct.Object]* %1, i64 0, i64 3, i32 3, i32 0
  %11 = bitcast i64* %10 to i8*
  %12 = getelementptr inbounds [10 x %struct.Object], [10 x %struct.Object]* %1, i64 0, i64 4, i32 3, i32 0
  %13 = bitcast i64* %12 to i8*
  %14 = getelementptr inbounds [10 x %struct.Object], [10 x %struct.Object]* %1, i64 0, i64 5, i32 3, i32 0
  %15 = bitcast i64* %14 to i8*
  %16 = getelementptr inbounds [10 x %struct.Object], [10 x %struct.Object]* %1, i64 0, i64 6, i32 3, i32 0
  %17 = bitcast i64* %16 to i8*
  %18 = getelementptr inbounds [10 x %struct.Object], [10 x %struct.Object]* %1, i64 0, i64 7, i32 3, i32 0
  %19 = bitcast i64* %18 to i8*
  %20 = getelementptr inbounds [10 x %struct.Object], [10 x %struct.Object]* %1, i64 0, i64 8, i32 3, i32 0
  %21 = bitcast i64* %20 to i8*
  %22 = getelementptr inbounds [10 x %struct.Object], [10 x %struct.Object]* %1, i64 0, i64 9, i32 3, i32 0
  %23 = bitcast i64* %22 to i8*
  %24 = getelementptr inbounds [10 x %struct.Object], [10 x %struct.Object]* %1, i64 0, i64 10, i32 3, i32 0
  %25 = bitcast i64* %24 to i8*
  %26 = getelementptr inbounds [10 x %struct.Object], [10 x %struct.Object]* %1, i64 0, i64 11, i32 3, i32 0
  %27 = bitcast i64* %26 to i8*
  %28 = getelementptr inbounds [10 x %struct.Object], [10 x %struct.Object]* %1, i64 0, i64 12, i32 3, i32 0
  %29 = bitcast i64* %28 to i8*
  %30 = getelementptr inbounds [10 x %struct.Object], [10 x %struct.Object]* %1, i64 0, i64 13, i32 3, i32 0
  %31 = bitcast i64* %30 to i8*
  %32 = getelementptr inbounds [10 x %struct.Object], [10 x %struct.Object]* %1, i64 0, i64 14, i32 3, i32 0
  %33 = bitcast i64* %32 to i8*
  %34 = getelementptr inbounds [10 x %struct.Object], [10 x %struct.Object]* %1, i64 0, i64 15, i32 3, i32 0
  %35 = bitcast i64* %34 to i8*
  %36 = getelementptr inbounds [10 x %struct.Object], [10 x %struct.Object]* %1, i64 0, i64 16, i32 3, i32 0
  %37 = bitcast i64* %36 to i8*
  %38 = getelementptr inbounds [10 x %struct.Object], [10 x %struct.Object]* %1, i64 0, i64 17, i32 3, i32 0
  %39 = bitcast i64* %38 to i8*
  %40 = getelementptr inbounds [10 x %struct.Object], [10 x %struct.Object]* %1, i64 0, i64 18, i32 3, i32 0
  %41 = bitcast i64* %40 to i8*
  %42 = getelementptr inbounds [10 x %struct.Object], [10 x %struct.Object]* %1, i64 0, i64 19, i32 3, i32 0
  %43 = bitcast i64* %42 to i8*
  %44 = getelementptr inbounds [10 x %struct.Object], [10 x %struct.Object]* %1, i64 0, i64 1
  %45 = getelementptr inbounds [10 x %struct.Object], [10 x %struct.Object]* %1, i64 0, i64 2
  %46 = getelementptr inbounds [10 x %struct.Object], [10 x %struct.Object]* %1, i64 0, i64 3
  %47 = getelementptr inbounds [10 x %struct.Object], [10 x %struct.Object]* %1, i64 0, i64 4
  %48 = getelementptr inbounds [10 x %struct.Object], [10 x %struct.Object]* %1, i64 0, i64 5
  %49 = getelementptr inbounds [10 x %struct.Object], [10 x %struct.Object]* %1, i64 0, i64 6
  %50 = getelementptr inbounds [10 x %struct.Object], [10 x %struct.Object]* %1, i64 0, i64 7
  %51 = getelementptr inbounds [10 x %struct.Object], [10 x %struct.Object]* %1, i64 0, i64 8
  %52 = getelementptr inbounds [10 x %struct.Object], [10 x %struct.Object]* %1, i64 0, i64 9
  %53 = getelementptr inbounds [10 x %struct.Object], [10 x %struct.Object]* %1, i64 0, i64 1
  %54 = getelementptr inbounds [10 x %struct.Object], [10 x %struct.Object]* %1, i64 0, i64 2
  %55 = getelementptr inbounds [10 x %struct.Object], [10 x %struct.Object]* %1, i64 0, i64 3
  %56 = getelementptr inbounds [10 x %struct.Object], [10 x %struct.Object]* %1, i64 0, i64 4
  %57 = getelementptr inbounds [10 x %struct.Object], [10 x %struct.Object]* %1, i64 0, i64 5
  %58 = getelementptr inbounds [10 x %struct.Object], [10 x %struct.Object]* %1, i64 0, i64 6
  %59 = getelementptr inbounds [10 x %struct.Object], [10 x %struct.Object]* %1, i64 0, i64 7
  %60 = getelementptr inbounds [10 x %struct.Object], [10 x %struct.Object]* %1, i64 0, i64 8
  %61 = getelementptr inbounds [10 x %struct.Object], [10 x %struct.Object]* %1, i64 0, i64 9
  %62 = getelementptr inbounds [10 x %struct.Object], [10 x %struct.Object]* %1, i64 0, i64 2
  %63 = getelementptr inbounds [10 x %struct.Object], [10 x %struct.Object]* %1, i64 0, i64 3
  %64 = getelementptr inbounds [10 x %struct.Object], [10 x %struct.Object]* %1, i64 0, i64 4
  %65 = getelementptr inbounds [10 x %struct.Object], [10 x %struct.Object]* %1, i64 0, i64 5
  %66 = getelementptr inbounds [10 x %struct.Object], [10 x %struct.Object]* %1, i64 0, i64 6
  %67 = getelementptr inbounds [10 x %struct.Object], [10 x %struct.Object]* %1, i64 0, i64 7
  %68 = getelementptr inbounds [10 x %struct.Object], [10 x %struct.Object]* %1, i64 0, i64 8
  %69 = getelementptr inbounds [10 x %struct.Object], [10 x %struct.Object]* %1, i64 0, i64 9
  %70 = getelementptr inbounds [10 x %struct.Object], [10 x %struct.Object]* %1, i64 0, i64 3
  %71 = getelementptr inbounds [10 x %struct.Object], [10 x %struct.Object]* %1, i64 0, i64 4
  %72 = getelementptr inbounds [10 x %struct.Object], [10 x %struct.Object]* %1, i64 0, i64 5
  %73 = getelementptr inbounds [10 x %struct.Object], [10 x %struct.Object]* %1, i64 0, i64 6
  %74 = getelementptr inbounds [10 x %struct.Object], [10 x %struct.Object]* %1, i64 0, i64 7
  %75 = getelementptr inbounds [10 x %struct.Object], [10 x %struct.Object]* %1, i64 0, i64 8
  %76 = getelementptr inbounds [10 x %struct.Object], [10 x %struct.Object]* %1, i64 0, i64 9
  %77 = getelementptr inbounds [10 x %struct.Object], [10 x %struct.Object]* %1, i64 0, i64 4
  %78 = getelementptr inbounds [10 x %struct.Object], [10 x %struct.Object]* %1, i64 0, i64 5
  %79 = getelementptr inbounds [10 x %struct.Object], [10 x %struct.Object]* %1, i64 0, i64 6
  %80 = getelementptr inbounds [10 x %struct.Object], [10 x %struct.Object]* %1, i64 0, i64 7
  %81 = getelementptr inbounds [10 x %struct.Object], [10 x %struct.Object]* %1, i64 0, i64 8
  %82 = getelementptr inbounds [10 x %struct.Object], [10 x %struct.Object]* %1, i64 0, i64 9
  %83 = getelementptr inbounds [10 x %struct.Object], [10 x %struct.Object]* %1, i64 0, i64 5
  %84 = getelementptr inbounds [10 x %struct.Object], [10 x %struct.Object]* %1, i64 0, i64 6
  %85 = getelementptr inbounds [10 x %struct.Object], [10 x %struct.Object]* %1, i64 0, i64 7
  %86 = getelementptr inbounds [10 x %struct.Object], [10 x %struct.Object]* %1, i64 0, i64 8
  %87 = getelementptr inbounds [10 x %struct.Object], [10 x %struct.Object]* %1, i64 0, i64 9
  %88 = getelementptr inbounds [10 x %struct.Object], [10 x %struct.Object]* %1, i64 0, i64 6
  %89 = getelementptr inbounds [10 x %struct.Object], [10 x %struct.Object]* %1, i64 0, i64 7
  %90 = getelementptr inbounds [10 x %struct.Object], [10 x %struct.Object]* %1, i64 0, i64 8
  %91 = getelementptr inbounds [10 x %struct.Object], [10 x %struct.Object]* %1, i64 0, i64 9
  %92 = getelementptr inbounds [10 x %struct.Object], [10 x %struct.Object]* %1, i64 0, i64 7
  %93 = getelementptr inbounds [10 x %struct.Object], [10 x %struct.Object]* %1, i64 0, i64 8
  %94 = getelementptr inbounds [10 x %struct.Object], [10 x %struct.Object]* %1, i64 0, i64 9
  %95 = getelementptr inbounds [10 x %struct.Object], [10 x %struct.Object]* %1, i64 0, i64 8
  %96 = getelementptr inbounds [10 x %struct.Object], [10 x %struct.Object]* %1, i64 0, i64 9
  br label %97

97:                                               ; preds = %150, %0
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %5, i8 0, i64 16, i1 false) #10
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %7, i8 0, i64 16, i1 false) #10
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %9, i8 0, i64 16, i1 false) #10
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %11, i8 0, i64 16, i1 false) #10
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %13, i8 0, i64 16, i1 false) #10
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %15, i8 0, i64 16, i1 false) #10
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %17, i8 0, i64 16, i1 false) #10
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %19, i8 0, i64 16, i1 false) #10
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %21, i8 0, i64 16, i1 false) #10
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %23, i8 0, i64 16, i1 false) #10
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %25, i8 0, i64 16, i1 false) #10
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %27, i8 0, i64 16, i1 false) #10
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %29, i8 0, i64 16, i1 false) #10
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %31, i8 0, i64 16, i1 false) #10
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %33, i8 0, i64 16, i1 false) #10
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %35, i8 0, i64 16, i1 false) #10
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %37, i8 0, i64 16, i1 false) #10
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %39, i8 0, i64 16, i1 false) #10
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %41, i8 0, i64 16, i1 false) #10
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %43, i8 0, i64 16, i1 false) #10
  call void @calculate_boost(%struct.Object* noundef nonnull %3, %struct.Object* noundef nonnull %44)
  call void @calculate_boost(%struct.Object* noundef nonnull %3, %struct.Object* noundef nonnull %45)
  call void @calculate_boost(%struct.Object* noundef nonnull %3, %struct.Object* noundef nonnull %46)
  call void @calculate_boost(%struct.Object* noundef nonnull %3, %struct.Object* noundef nonnull %47)
  call void @calculate_boost(%struct.Object* noundef nonnull %3, %struct.Object* noundef nonnull %48)
  call void @calculate_boost(%struct.Object* noundef nonnull %3, %struct.Object* noundef nonnull %49)
  call void @calculate_boost(%struct.Object* noundef nonnull %3, %struct.Object* noundef nonnull %50)
  call void @calculate_boost(%struct.Object* noundef nonnull %3, %struct.Object* noundef nonnull %51)
  call void @calculate_boost(%struct.Object* noundef nonnull %3, %struct.Object* noundef nonnull %52)
  call void @calculate_boost(%struct.Object* noundef nonnull %53, %struct.Object* noundef nonnull %54)
  call void @calculate_boost(%struct.Object* noundef nonnull %53, %struct.Object* noundef nonnull %55)
  call void @calculate_boost(%struct.Object* noundef nonnull %53, %struct.Object* noundef nonnull %56)
  call void @calculate_boost(%struct.Object* noundef nonnull %53, %struct.Object* noundef nonnull %57)
  call void @calculate_boost(%struct.Object* noundef nonnull %53, %struct.Object* noundef nonnull %58)
  call void @calculate_boost(%struct.Object* noundef nonnull %53, %struct.Object* noundef nonnull %59)
  call void @calculate_boost(%struct.Object* noundef nonnull %53, %struct.Object* noundef nonnull %60)
  call void @calculate_boost(%struct.Object* noundef nonnull %53, %struct.Object* noundef nonnull %61)
  call void @calculate_boost(%struct.Object* noundef nonnull %62, %struct.Object* noundef nonnull %63)
  call void @calculate_boost(%struct.Object* noundef nonnull %62, %struct.Object* noundef nonnull %64)
  call void @calculate_boost(%struct.Object* noundef nonnull %62, %struct.Object* noundef nonnull %65)
  call void @calculate_boost(%struct.Object* noundef nonnull %62, %struct.Object* noundef nonnull %66)
  call void @calculate_boost(%struct.Object* noundef nonnull %62, %struct.Object* noundef nonnull %67)
  call void @calculate_boost(%struct.Object* noundef nonnull %62, %struct.Object* noundef nonnull %68)
  call void @calculate_boost(%struct.Object* noundef nonnull %62, %struct.Object* noundef nonnull %69)
  call void @calculate_boost(%struct.Object* noundef nonnull %70, %struct.Object* noundef nonnull %71)
  call void @calculate_boost(%struct.Object* noundef nonnull %70, %struct.Object* noundef nonnull %72)
  call void @calculate_boost(%struct.Object* noundef nonnull %70, %struct.Object* noundef nonnull %73)
  call void @calculate_boost(%struct.Object* noundef nonnull %70, %struct.Object* noundef nonnull %74)
  call void @calculate_boost(%struct.Object* noundef nonnull %70, %struct.Object* noundef nonnull %75)
  call void @calculate_boost(%struct.Object* noundef nonnull %70, %struct.Object* noundef nonnull %76)
  call void @calculate_boost(%struct.Object* noundef nonnull %77, %struct.Object* noundef nonnull %78)
  call void @calculate_boost(%struct.Object* noundef nonnull %77, %struct.Object* noundef nonnull %79)
  call void @calculate_boost(%struct.Object* noundef nonnull %77, %struct.Object* noundef nonnull %80)
  call void @calculate_boost(%struct.Object* noundef nonnull %77, %struct.Object* noundef nonnull %81)
  call void @calculate_boost(%struct.Object* noundef nonnull %77, %struct.Object* noundef nonnull %82)
  call void @calculate_boost(%struct.Object* noundef nonnull %83, %struct.Object* noundef nonnull %84)
  call void @calculate_boost(%struct.Object* noundef nonnull %83, %struct.Object* noundef nonnull %85)
  call void @calculate_boost(%struct.Object* noundef nonnull %83, %struct.Object* noundef nonnull %86)
  call void @calculate_boost(%struct.Object* noundef nonnull %83, %struct.Object* noundef nonnull %87)
  call void @calculate_boost(%struct.Object* noundef nonnull %88, %struct.Object* noundef nonnull %89)
  call void @calculate_boost(%struct.Object* noundef nonnull %88, %struct.Object* noundef nonnull %90)
  call void @calculate_boost(%struct.Object* noundef nonnull %88, %struct.Object* noundef nonnull %91)
  call void @calculate_boost(%struct.Object* noundef nonnull %92, %struct.Object* noundef nonnull %93)
  call void @calculate_boost(%struct.Object* noundef nonnull %92, %struct.Object* noundef nonnull %94)
  call void @calculate_boost(%struct.Object* noundef nonnull %95, %struct.Object* noundef nonnull %96)
  br label %98

98:                                               ; preds = %97, %119
  %99 = phi i64 [ %120, %119 ], [ 0, %97 ]
  %100 = getelementptr inbounds [10 x %struct.Object], [10 x %struct.Object]* %1, i64 0, i64 %99, i32 1, i32 0
  %101 = load i64, i64* %100, align 8, !tbaa !13
  %102 = icmp sgt i64 %101, 4619
  br i1 %102, label %105, label %103

103:                                              ; preds = %98
  %104 = icmp slt i64 %101, 510
  br i1 %104, label %105, label %109

105:                                              ; preds = %103, %98
  %106 = phi i64 [ -200, %98 ], [ 200, %103 ]
  %107 = getelementptr inbounds [10 x %struct.Object], [10 x %struct.Object]* %1, i64 0, i64 %99, i32 3, i32 0
  store i64 %106, i64* %107, align 8, !tbaa !20
  %108 = getelementptr inbounds [10 x %struct.Object], [10 x %struct.Object]* %1, i64 0, i64 %99, i32 2, i32 0
  store i64 0, i64* %108, align 8, !tbaa !15
  br label %109

109:                                              ; preds = %105, %103
  %110 = getelementptr inbounds [10 x %struct.Object], [10 x %struct.Object]* %1, i64 0, i64 %99, i32 1, i32 1
  %111 = load i64, i64* %110, align 16, !tbaa !14
  %112 = icmp sgt i64 %111, 4619
  br i1 %112, label %115, label %113

113:                                              ; preds = %109
  %114 = icmp slt i64 %111, 510
  br i1 %114, label %115, label %119

115:                                              ; preds = %113, %109
  %116 = phi i64 [ -200, %109 ], [ 200, %113 ]
  %117 = getelementptr inbounds [10 x %struct.Object], [10 x %struct.Object]* %1, i64 0, i64 %99, i32 3, i32 1
  store i64 %116, i64* %117, align 16, !tbaa !21
  %118 = getelementptr inbounds [10 x %struct.Object], [10 x %struct.Object]* %1, i64 0, i64 %99, i32 2, i32 1
  store i64 0, i64* %118, align 16, !tbaa !16
  br label %119

119:                                              ; preds = %113, %115
  %120 = add nuw nsw i64 %99, 1
  %121 = icmp eq i64 %120, 10
  br i1 %121, label %125, label %98, !llvm.loop !27

122:                                              ; preds = %125
  call void @draw_objects(%struct.Object* noundef nonnull %3)
  %123 = call i32 (...) @simExit() #10
  %124 = icmp eq i32 %123, 1
  br i1 %124, label %149, label %150

125:                                              ; preds = %119, %125
  %126 = phi i64 [ %147, %125 ], [ 0, %119 ]
  %127 = getelementptr inbounds [10 x %struct.Object], [10 x %struct.Object]* %1, i64 0, i64 %126, i32 3, i32 0
  %128 = load i64, i64* %127, align 8, !tbaa !20
  %129 = getelementptr inbounds [10 x %struct.Object], [10 x %struct.Object]* %1, i64 0, i64 %126, i32 2, i32 0
  %130 = load i64, i64* %129, align 8, !tbaa !15
  %131 = add nsw i64 %130, %128
  %132 = getelementptr inbounds [10 x %struct.Object], [10 x %struct.Object]* %1, i64 0, i64 %126, i32 3, i32 1
  %133 = load i64, i64* %132, align 16, !tbaa !21
  %134 = getelementptr inbounds [10 x %struct.Object], [10 x %struct.Object]* %1, i64 0, i64 %126, i32 2, i32 1
  %135 = load i64, i64* %134, align 16, !tbaa !16
  %136 = add nsw i64 %135, %133
  %137 = mul nsw i64 %131, 99
  %138 = sdiv i64 %137, 100
  store i64 %138, i64* %129, align 8, !tbaa !15
  %139 = mul nsw i64 %136, 99
  %140 = sdiv i64 %139, 100
  store i64 %140, i64* %134, align 16, !tbaa !16
  %141 = getelementptr inbounds [10 x %struct.Object], [10 x %struct.Object]* %1, i64 0, i64 %126, i32 1, i32 0
  %142 = load i64, i64* %141, align 8, !tbaa !13
  %143 = add nsw i64 %142, %138
  store i64 %143, i64* %141, align 8, !tbaa !13
  %144 = getelementptr inbounds [10 x %struct.Object], [10 x %struct.Object]* %1, i64 0, i64 %126, i32 1, i32 1
  %145 = load i64, i64* %144, align 16, !tbaa !14
  %146 = add nsw i64 %145, %140
  store i64 %146, i64* %144, align 16, !tbaa !14
  %147 = add nuw nsw i64 %126, 1
  %148 = icmp eq i64 %147, 20
  br i1 %148, label %122, label %125, !llvm.loop !28

149:                                              ; preds = %122
  call void @llvm.lifetime.end.p0i8(i64 640, i8* nonnull %2) #10
  ret void

150:                                              ; preds = %122
  call void (...) @simFlush() #10
  br label %97
}

declare i32 @simExit(...) local_unnamed_addr #5

declare void @simFlush(...) local_unnamed_addr #5

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare i64 @llvm.abs.i64(i64, i1 immarg) #8

; Function Attrs: argmemonly nofree nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #9

attributes #0 = { mustprogress nofree norecurse nosync nounwind readnone uwtable willreturn "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { mustprogress nofree nosync nounwind readnone uwtable willreturn "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #2 = { mustprogress nofree norecurse nosync nounwind uwtable willreturn writeonly "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nounwind uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { argmemonly mustprogress nofree nosync nounwind willreturn }
attributes #5 = { "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #6 = { mustprogress nofree nosync nounwind uwtable willreturn "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #7 = { mustprogress nofree norecurse nosync nounwind uwtable willreturn "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #8 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #9 = { argmemonly nofree nounwind willreturn writeonly }
attributes #10 = { nounwind }

!llvm.module.flags = !{!0, !1, !2, !3}
!llvm.ident = !{!4}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{i32 7, !"uwtable", i32 1}
!4 = !{!"Ubuntu clang version 14.0.0-1ubuntu1.1"}
!5 = !{!6, !7, i64 60}
!6 = !{!"", !7, i64 0, !10, i64 8, !10, i64 24, !10, i64 40, !7, i64 56, !7, i64 60}
!7 = !{!"int", !8, i64 0}
!8 = !{!"omnipotent char", !9, i64 0}
!9 = !{!"Simple C/C++ TBAA"}
!10 = !{!"", !11, i64 0, !11, i64 8}
!11 = !{!"long long", !8, i64 0}
!12 = !{!6, !7, i64 0}
!13 = !{!6, !11, i64 8}
!14 = !{!6, !11, i64 16}
!15 = !{!6, !11, i64 24}
!16 = !{!6, !11, i64 32}
!17 = !{!6, !7, i64 56}
!18 = distinct !{!18, !19}
!19 = !{!"llvm.loop.mustprogress"}
!20 = !{!6, !11, i64 40}
!21 = !{!6, !11, i64 48}
!22 = distinct !{!22, !19}
!23 = distinct !{!23, !19}
!24 = distinct !{!24, !19}
!25 = distinct !{!25, !19}
!26 = distinct !{!26, !19}
!27 = distinct !{!27, !19}
!28 = distinct !{!28, !19}
